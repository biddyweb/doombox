diff --git a/.classpath b/.classpath
index 609aa00..6e9239f 100644
--- a/.classpath
+++ b/.classpath
@@ -1,7 +1,7 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="output" path="bin"/>
-</classpath>
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 8847d89..dd7ee7e 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -1,13 +1,14 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.aregner.android.pandoid"
-      android:versionCode="2" android:versionName="0.2">
+      android:versionCode="3" android:versionName="1.0">
     <uses-sdk android:minSdkVersion="8" />
     <uses-permission android:name="android.permission.INTERNET"></uses-permission>
     <uses-permission android:name="android.permission.READ_PHONE_STATE"></uses-permission>
 
     <application android:icon="@drawable/icon" android:label="@string/app_name">
-        <activity android:name="PandoidPlayer" android:label="@string/app_name" android:clearTaskOnLaunch="true">
+        <activity android:name="PandoidPlayer" android:label="@string/app_name" android:clearTaskOnLaunch="true"
+        		  android:theme="@android:style/Theme.NoTitleBar">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN"></action>
                 <category android:name="android.intent.category.LAUNCHER"></category>
diff --git a/res/layout-land/player.xml b/res/layout-land/player.xml
new file mode 100644
index 0000000..7d69cc9
--- /dev/null
+++ b/res/layout-land/player.xml
@@ -0,0 +1,94 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" 
+    android:layout_width="fill_parent" 
+    android:layout_height="fill_parent"
+>
+<LinearLayout
+	android:layout_height="fill_parent"
+	android:layout_width="fill_parent"
+	android:layout_above="@+id/player_buttons"
+	android:orientation="horizontal"
+	>
+	<LinearLayout	
+		android:layout_height="fill_parent"
+		android:layout_width="fill_parent"
+		android:orientation="vertical"
+		android:layout_weight="1"
+		android:gravity="left"
+	>
+		<ImageView 
+			android:layout_height="fill_parent" 
+			android:layout_width="fill_parent" 
+	    	android:src="@drawable/transparent" 
+	    	android:id="@+id/player_image"
+    	/>
+	</LinearLayout>
+	<RelativeLayout	
+		android:layout_height="fill_parent"
+		android:layout_width="fill_parent"
+		android:orientation="vertical"
+		android:gravity="center_vertical"
+		android:paddingLeft="5px"
+		android:layout_weight="1"
+	>
+		<TextView 
+			android:layout_width="wrap_content" 
+			android:layout_height="wrap_content"	 
+			android:textSize="8pt"
+		    android:text="Loading..." 
+		    android:id="@+id/player_topText" 
+	    />
+    
+	    <TextView 
+	    	android:layout_width="wrap_content" 
+	    	android:layout_height="wrap_content" 
+	    	android:layout_below="@+id/player_topText"
+	    	android:layout_alignLeft="@+id/player_topText"
+	    	android:layout_alignRight="@+id/player_topText"
+	    	android:gravity="center"
+	    	android:paddingTop="14dip"
+	    	android:text="" 
+	    	android:id="@+id/player_bottomText"
+	    />
+	</RelativeLayout>
+		
+</LinearLayout>
+	    <RelativeLayout 
+	    	android:layout_height="60dip" 
+	    	android:layout_width="fill_parent" 
+	    	android:layout_alignParentBottom="true" 
+	    	android:id="@+id/player_buttons" 
+	    	android:gravity="center"
+	    >
+			<Button android:text="=" android:layout_width="60dip" android:id="@+id/station_list" 
+	        	android:layout_height="fill_parent" android:layout_alignParentBottom="true" 
+	        	android:onClick="controlButtonPressed" android:typeface="monospace" android:textStyle="bold" 
+	        	android:width="60dip" android:textSize="20sp"></Button>
+	        	
+	        <Button android:text="--" android:layout_width="60dip" android:id="@+id/player_ban" 
+	        	android:layout_height="fill_parent" android:layout_alignParentBottom="true" 
+	        	android:layout_alignTop="@+id/station_list" android:layout_alignBottom="@+id/station_list" 
+	        	android:onClick="controlButtonPressed" android:typeface="monospace" android:textStyle="bold" 
+	        	android:width="60dip" android:textSize="20sp" android:layout_toRightOf="@+id/station_list"></Button>
+	
+	        <Button android:text="++" android:layout_width="60dip" android:id="@+id/player_love"
+	        	android:layout_height="fill_parent" android:layout_toRightOf="@+id/player_ban"
+	        	android:layout_alignTop="@+id/player_ban" android:layout_alignBottom="@+id/player_ban" 
+	        	android:onClick="controlButtonPressed" android:typeface="monospace" android:textStyle="bold" 
+	        	android:width="60dip" android:textSize="20sp"></Button>
+	
+	        <Button android:text=">" android:layout_width="60dip" android:id="@+id/player_pause"
+	        	android:layout_height="fill_parent" android:layout_toRightOf="@+id/player_love"
+	        	android:layout_alignTop="@+id/player_love" android:layout_alignBottom="@+id/player_love" 
+	        	android:onClick="controlButtonPressed" android:typeface="monospace" android:textStyle="bold" 
+	        	android:width="60dip" android:textSize="20sp"></Button>
+	
+	        <Button android:text="&gt;&gt;" android:layout_width="60dip" android:id="@+id/player_next"
+	        	android:layout_height="fill_parent" android:layout_toRightOf="@+id/player_pause"
+	        	android:layout_alignTop="@+id/player_pause" android:layout_alignBottom="@+id/player_pause" 
+	        	android:onClick="controlButtonPressed" android:typeface="monospace" android:textStyle="bold" 
+	        	android:width="60dip" android:textSize="20sp"></Button>
+	
+	    </RelativeLayout>
+ </RelativeLayout>
diff --git a/res/layout/player.xml b/res/layout/player.xml
index ded3af9..f5a58bf 100644
--- a/res/layout/player.xml
+++ b/res/layout/player.xml
@@ -3,44 +3,50 @@
     android:orientation="horizontal" android:layout_width="fill_parent" android:layout_height="fill_parent">
 
     <TextView android:layout_width="fill_parent" android:layout_height="wrap_content" 
-    android:paddingTop="20dip" android:gravity="center" android:text="Loading..." android:id="@+id/player_topText" 
+    android:paddingTop="20dip" android:textSize="8pt" android:gravity="center" android:text="Loading..." android:id="@+id/player_topText" 
     android:layout_alignParentLeft="true"></TextView>
-
-    <ImageView android:layout_height="wrap_content" android:layout_width="fill_parent" 
-    	android:src="@drawable/transparent" android:id="@+id/player_image" android:paddingTop="14dip"
-    	android:layout_below="@+id/player_topText" android:layout_alignLeft="@+id/player_topText" 
-    	android:layout_alignRight="@+id/player_topText"></ImageView>
-
+    
     <TextView android:layout_width="fill_parent" android:layout_height="wrap_content" android:paddingTop="14dip"
-    	android:layout_below="@+id/player_image" android:layout_alignLeft="@+id/player_image" 
+    	android:layout_below="@+id/player_topText" android:layout_alignLeft="@+id/player_image" 
     	android:layout_alignRight="@+id/player_image" android:gravity="center" android:text="" 
     	android:id="@+id/player_bottomText"></TextView>
 
-    <RelativeLayout android:layout_height="80dip" android:layout_width="fill_parent" 
+    <ImageView android:layout_height="fill_parent" android:layout_width="fill_parent" 
+    	android:src="@drawable/transparent" android:id="@+id/player_image" android:paddingTop="14dip"
+    	android:layout_below="@+id/player_bottomText" android:layout_above="@+id/player_buttons"
+    	android:layout_alignLeft="@+id/player_topText" android:layout_alignRight="@+id/player_topText"></ImageView>
+
+    <RelativeLayout android:layout_height="60dip" android:layout_width="fill_parent" android:paddingTop="5px"
     	android:layout_alignParentBottom="true" android:id="@+id/player_buttons" android:gravity="center">
 
-        <Button android:text="--" android:layout_width="75dip" android:id="@+id/player_ban" 
+		<Button android:text="=" android:layout_width="60dip" android:id="@+id/station_list" 
+        	android:layout_height="fill_parent" android:layout_alignParentBottom="true" 
+        	android:onClick="controlButtonPressed" android:typeface="monospace" android:textStyle="bold" 
+        	android:width="60dip" android:textSize="20sp"></Button>
+        	
+        <Button android:text="--" android:layout_width="60dip" android:id="@+id/player_ban" 
         	android:layout_height="fill_parent" android:layout_alignParentBottom="true" 
+        	android:layout_alignTop="@+id/station_list" android:layout_alignBottom="@+id/station_list" 
         	android:onClick="controlButtonPressed" android:typeface="monospace" android:textStyle="bold" 
-        	android:width="75dip" android:textSize="30sp"></Button>
+        	android:width="60dip" android:textSize="20sp" android:layout_toRightOf="@+id/station_list"></Button>
 
-        <Button android:text="++" android:layout_width="75dip" android:id="@+id/player_love"
+        <Button android:text="++" android:layout_width="60dip" android:id="@+id/player_love"
         	android:layout_height="fill_parent" android:layout_toRightOf="@+id/player_ban"
         	android:layout_alignTop="@+id/player_ban" android:layout_alignBottom="@+id/player_ban" 
         	android:onClick="controlButtonPressed" android:typeface="monospace" android:textStyle="bold" 
-        	android:width="75dip" android:textSize="30sp"></Button>
+        	android:width="60dip" android:textSize="20sp"></Button>
 
-        <Button android:text="||" android:layout_width="75dip" android:id="@+id/player_pause"
+        <Button android:text=">" android:layout_width="60dip" android:id="@+id/player_pause"
         	android:layout_height="fill_parent" android:layout_toRightOf="@+id/player_love"
         	android:layout_alignTop="@+id/player_love" android:layout_alignBottom="@+id/player_love" 
         	android:onClick="controlButtonPressed" android:typeface="monospace" android:textStyle="bold" 
-        	android:width="75dip" android:textSize="30sp"></Button>
+        	android:width="60dip" android:textSize="20sp"></Button>
 
-        <Button android:text="&gt;&gt;" android:layout_width="75dip" android:id="@+id/player_next"
+        <Button android:text="&gt;&gt;" android:layout_width="60dip" android:id="@+id/player_next"
         	android:layout_height="fill_parent" android:layout_toRightOf="@+id/player_pause"
         	android:layout_alignTop="@+id/player_pause" android:layout_alignBottom="@+id/player_pause" 
         	android:onClick="controlButtonPressed" android:typeface="monospace" android:textStyle="bold" 
-        	android:width="75dip" android:textSize="30sp"></Button>
+        	android:width="60dip" android:textSize="20sp"></Button>
 
     </RelativeLayout>
 
diff --git a/res/layout/stations_item.xml b/res/layout/stations_item.xml
index 96be11f..8cc04e6 100644
--- a/res/layout/stations_item.xml
+++ b/res/layout/stations_item.xml
@@ -8,6 +8,6 @@
 	    android:layout_width="fill_parent"
 	    android:layout_height="fill_parent"
 	    android:padding="10dp"
-	    android:textSize="16sp" android:id="@+id/stations_name">
+	    android:textSize="8pt" android:id="@+id/stations_name">
 	</TextView>
 </LinearLayout>
\ No newline at end of file
diff --git a/res/menu/station_select_menu.xml b/res/menu/station_select_menu.xml
new file mode 100644
index 0000000..4e7757b
--- /dev/null
+++ b/res/menu/station_select_menu.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:id="@+id/create_station" android:title="Create Station"></item>
+</menu>
diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index 8440815..6a58b34 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -10,4 +10,15 @@
         <item>mp3</item>
         <item>mp3-hifi</item>
     </string-array>
+    <string-array name="pandora_albumRes_values">
+    	<item>0</item>
+    	<item>1</item>
+    	<item>2</item>
+    </string-array>
+    <string-array name="pandora_albumRes_text">
+    	<item>Low</item>
+    	<item>Normal</item>
+    	<item>High</item>
+    </string-array>
+
 </resources>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index f4fd2d3..38c7837 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -6,4 +6,6 @@
     <string name="loading">Loading %s...</string>
     <string name="baned_song">Buzz-kill...</string>
     <string name="loved_song">Rock on!</string>
+    <string name="no_song">No song currently playing...</string>
+    <string name="next_song">Loading next song...</string>
 </resources>
diff --git a/res/xml/preferences.xml b/res/xml/preferences.xml
index 3195e1b..fc35c28 100644
--- a/res/xml/preferences.xml
+++ b/res/xml/preferences.xml
@@ -24,6 +24,7 @@
     <PreferenceCategory android:title="Audio">
         <ListPreference android:key="pandora_audioFormat" android:title="Audio Format" android:summary="Audio encoding format to request from the Pandora service." android:entryValues="@array/pandora_audioFormat_values" android:entries="@array/pandora_audioFormat_text" android:defaultValue="aacplus"></ListPreference>
     </PreferenceCategory><PreferenceCategory android:title="Behavior">
+    	<ListPreference android:key="pandora_albumArtRes" android:title="Album Art Resolution" android:summary="Preferred resolution of album artwork." android:entryValues="@array/pandora_albumRes_values" android:entries="@array/pandora_albumRes_text" android:defaultValue="0"></ListPreference>
         <CheckBoxPreference android:key="behave_nextOnBan" android:summary='Skip to the next song when you "thumb down" a song.' android:title="Next track on ban" android:defaultValue="true"></CheckBoxPreference>
         <CheckBoxPreference android:key="behave_resumeOnHangup" android:summary="Resume playback automatically when a call is ended." android:title="Resume on Hangup" android:defaultValue="true"></CheckBoxPreference>
         
diff --git a/src/com/aregner/android/pandoid/AlbumArtDownloader.java b/src/com/aregner/android/pandoid/AlbumArtDownloader.java
new file mode 100644
index 0000000..458d4d8
--- /dev/null
+++ b/src/com/aregner/android/pandoid/AlbumArtDownloader.java
@@ -0,0 +1,152 @@
+package com.aregner.android.pandoid;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+
+import android.util.Log;
+
+import com.aregner.pandora.Song;
+
+
+public class AlbumArtDownloader {
+	
+	public static final String SMALL = "small";
+	public static final String MEDIUM = "medium";
+	public static final String LARGE = "large";
+	public static final String XLARGE = "extralarge";
+	public static final String MEGA = "mega";	
+	
+	public static final int PREF_NORMAL = 0;
+	public static final int PREF_HIRES = 1;
+	public static final int PREF_MEGA = 2;
+	
+	
+	private static final int ALBUM_ARTIST = 1; //look for album art with the album and the artist
+	private static final int ARTIST_TITLE = 2; //look for album art using the artist and title
+	
+	private static final String LOG_TAG = "AlbumArtDownloader";
+	
+	private String apiKey = "3f6527e63fa7ab4771a687ce39377cf8";
+	private String artist, title, album;
+	private String url;
+	
+	private Map<String, String> urls = new HashMap<String, String>();
+	
+	public AlbumArtDownloader(Song song){
+		String request;
+		artist = song.getArtist();
+		title = song.getTitle();
+		album = song.getAlbum();
+		
+		request = formRequest(ALBUM_ARTIST);
+		if(!sendRequest(request)) {
+			request = formRequest(ARTIST_TITLE);
+			sendRequest(request);
+		}
+	}
+	
+	private String formRequest(int method){
+		String methodCall, request, parameters = "";
+
+		if(method == ALBUM_ARTIST) {
+			methodCall = "album.getinfo";
+			parameters += "&album=" + album.replaceAll(" ", "%20");
+		}
+		else if(method == ARTIST_TITLE) {
+			methodCall = "track.getinfo";
+			Log.i("PandoidPlayer", "Could not find using album and artist, using track and artist");
+			parameters += "&track=" + title.replaceAll(" ", "%20");
+		}
+		else {
+			return null;
+		}
+		
+		parameters +="&artist=" + artist.replaceAll(" ", "%20");
+		request = "http://ws.audioscrobbler.com/2.0/?method=" + methodCall + "&api_key="+apiKey;
+		request += parameters;
+		
+		Log.i(LOG_TAG, request);
+		return request;
+	}
+	
+	private boolean sendRequest(String request) {
+		String imgUrl = null;
+		boolean success = true;
+        try {
+        	URL url = new URL(request);
+            InputStream is = url.openStream();
+            DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
+            Document doc = db.parse(is);
+            
+            NodeList nl = doc.getElementsByTagName("image");
+            for (int i = 0; i < nl.getLength(); i++) {
+            	
+                Node n = nl.item(i);
+                String imageSize = n.getAttributes().item(0).getNodeValue();
+                Node fc = n.getFirstChild();
+              
+                if (fc != null){
+                	imgUrl = fc.getNodeValue();
+                	
+                	if(imgUrl.trim().length() > 0) {
+                		//get rid of urls that the app passes when there is no artwork available: noimage
+                		//and if you get repeated bad requests: /serve/174s
+                		if(!imgUrl.contains("noimage") && !imgUrl.contains("/serve/174s")) {
+                			urls.put(imageSize, imgUrl);
+                		}
+                	}
+                }
+            }
+            if(urls.size() == 0){
+            	success = false;
+            }
+        }
+        catch (Exception e) {
+        	e.printStackTrace();
+        	success = false;
+        }
+        return success;
+	}
+	
+	public String getAlbumUrl(String exactSize)  {
+		Log.i(LOG_TAG,"Returning url:" + urls.get(exactSize));
+		return urls.get(exactSize);
+	}
+
+	public String getAlbumUrl(int preference){
+		if(preference == PREF_NORMAL){
+			return urls.get(LARGE);
+		}
+		else if(preference == PREF_HIRES){
+			if(urls.get(XLARGE)!= null){
+				return urls.get(XLARGE);
+			}
+			else if(urls.get(LARGE) != null){
+				return urls.get(LARGE);
+			}
+		}
+		else if(preference == PREF_MEGA) {
+			if(urls.get(MEGA) != null){
+				return urls.get(MEGA);
+			}
+			else if(urls.get(XLARGE)!= null){
+				return urls.get(XLARGE);
+			}
+			else if(urls.get(LARGE) != null) {
+				return urls.get(LARGE);
+			}
+			else return null;
+		}
+		return null;	
+	}
+}
diff --git a/src/com/aregner/android/pandoid/PandoidPlayer.java b/src/com/aregner/android/pandoid/PandoidPlayer.java
index 88e41c8..3cc5095 100644
--- a/src/com/aregner/android/pandoid/PandoidPlayer.java
+++ b/src/com/aregner/android/pandoid/PandoidPlayer.java
@@ -17,28 +17,35 @@
  */
 package com.aregner.android.pandoid;
 
+import java.util.Map;
+
+import com.aregner.android.pandoid.PandoraRadioService;
 import com.aregner.pandora.Song;
 
 import android.app.Activity;
-import android.app.Dialog;
 import android.app.ProgressDialog;
+import android.content.BroadcastReceiver;
+import android.content.Context;
 import android.content.Intent;
+import android.content.IntentFilter;
 import android.content.SharedPreferences;
-import android.media.MediaPlayer;
-import android.media.MediaPlayer.OnCompletionListener;
-import android.media.MediaPlayer.OnPreparedListener;
+import android.content.pm.ActivityInfo;
+import android.graphics.drawable.Drawable;
 import android.os.AsyncTask;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
+import android.util.Log;
+import android.view.Display;
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
 import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
 import android.widget.ImageView;
 import android.widget.TextView;
 import android.widget.Toast;
 
-
 public class PandoidPlayer extends Activity {
 
 	public static final int REQUIRE_SELECT_STATION = 0x10;
@@ -50,33 +57,63 @@ public class PandoidPlayer extends Activity {
 	private static ProgressDialog waiting;
 	private PandoraRadioService pandora;
 	private SharedPreferences prefs;
+	private boolean initialLogin = false;
 	private ImageDownloader imageDownloader = new ImageDownloader();
+	ImageView image, cache;
+		
+	private static  String LOG_TAG = "PandoidPlayer";
+	private static String SETUP_TAG = "InitialSetupTask";
+	private static String STATION_TAG = "PlayStationTask";
+	
+	IntentFilter intentFilter = new IntentFilter();
+	private BroadcastReceiver receiver = new BroadcastReceiver() {
+
+		@Override
+		public void onReceive(Context context, Intent intent) {
+			Log.i(LOG_TAG, "Song Change Broadcast Received");
+			//deleted cached image
+			cache = null;
+			updateForNewSong();
+		}
+	};
 
 	/** Called when the activity is first created. */
 	@Override
 	public void onCreate(Bundle savedInstanceState) {
+		Log.i(LOG_TAG, "Activity Created");
 		super.onCreate(savedInstanceState);
 		setContentView(R.layout.player);
-
-		if(PandoraRadioService.getInstance(false) == null) {
-			// handle for the preferences for us to use everywhere
-			prefs = PreferenceManager.getDefaultSharedPreferences(getBaseContext());
-
+		
+		//if there is a cached album cover use it.
+		cache = (ImageView) getLastNonConfigurationInstance();
+		// handle for the preferences for us to use everywhere
+		prefs = PreferenceManager.getDefaultSharedPreferences(getBaseContext());
+		
+		pandora = PandoraRadioService.getInstance(false);
+		if(pandora == null) {
+			Log.i(LOG_TAG, "Service is null. Getting credentials from prefs");
 			// look for what we need to continue with pandora auth
 			String username = prefs.getString("pandora_username", null);
 			String password = prefs.getString("pandora_password", null);
 
 			if(username == null || password == null) {
 				// bring them to the login screen so they can enter what we need
+				Log.i(LOG_TAG, "Calling PandoidLogin.class");
+				initialLogin = true;
 				startActivityForResult(new Intent(getApplicationContext(), PandoidLogin.class), REQUIRE_LOGIN_CREDS);
 			}
 		}
-		else {
-			pandora = PandoraRadioService.getInstance(false);
-			updateForNewSong(pandora.getCurrentSong());
+	}
+	/**
+	 * Returns the current image being use for the album cover.
+	 */
+	@Override
+	public Object onRetainNonConfigurationInstance() {
+		if(image != null){
+			return image;
 		}
+		return null;
 	}
-
 	@Override
 	public boolean onCreateOptionsMenu(Menu menu) {
 		MenuInflater inflater = getMenuInflater();
@@ -85,67 +122,152 @@ public class PandoidPlayer extends Activity {
 	}
 
 	@Override
-	protected void onStart() {
-		super.onStart();
-	}
-
-	@Override
 	protected void onResume() {
 		super.onResume();
-		// The activity has become visible (it is now "resumed").
-		serviceSetup();
+		Log.i(LOG_TAG, "Resuming Activity...");
+		
+		Log.i(LOG_TAG, "Registering Receiver...");
+		intentFilter.addAction(PandoraRadioService.SONG_CHANGE);	
+		intentFilter.addAction(Intent.ACTION_SCREEN_ON); //check for need of UI update if screen has been off
+		registerReceiver(receiver, intentFilter);
+		
+		if(!initialLogin){
+			serviceSetup();
+		}
+		
+		updateForNewSong();
 	}
 	
 	private void serviceSetup() {
 		if(pandora == null || !(pandora instanceof PandoraRadioService)) {
-			(new InitialSetupTask()).execute();
+			Log.i(LOG_TAG, "Executing InitialSetupTask");
+			new InitialSetupTask().execute();
 		}
 	}
 
-	protected void updateForNewSong(Song song) {
-		TextView top = (TextView) findViewById(R.id.player_topText);
-		TextView bottom = (TextView) findViewById(R.id.player_bottomText);
-		ImageView image = (ImageView) findViewById(R.id.player_image);
-
-		top.setText(String.format("%s by %s", song.getTitle(), song.getArtist()));
-		imageDownloader.download(song.getAlbumCoverUrl(), image);
-		bottom.setText(String.format("%s", song.getAlbum()));
+	protected void updateForNewSong() {		
+		Log.i(LOG_TAG, "updateForNewSong() called..");
+		
+		if(pandora != null && pandora.isReadytoUpdateUI()){ 
+			
+			String url;
+			TextView top, bottom;
+			Button player_pause;
+			Song song;
+			
+			song = pandora.getCurrentSong();
+			
+			top = (TextView) findViewById(R.id.player_topText);
+			bottom = (TextView) findViewById(R.id.player_bottomText);
+			image = (ImageView) findViewById(R.id.player_image);
+			player_pause = (Button) findViewById(R.id.player_pause);
+			
+			if(pandora.isPlaying())
+				player_pause.setText("||");
+			
+			if(cache == null) {
+				url = getImageUrl(song);
+				
+				if(url == null ||  url.length() == 0) {
+					Log.i(LOG_TAG, "Couldn't find lastFm album artwork, reverting to pandora...");
+					 url = song.getAlbumCoverUrl();
+				}
+				Log.i(LOG_TAG,"album url = " + url);
+				imageDownloader.download(url, image);
+			}
+				
+			else 
+				image.setImageDrawable(cache.getDrawable());
+			
+			top.setText(String.format("%s by %s", song.getTitle(), song.getArtist()));
+			bottom.setText(String.format("%s", song.getAlbum()));
+		}
 	}
 
+	protected String getImageUrl(Song song) {
+
+		String albumResPref = prefs.getString("pandora_albumArtRes", "0");
+		int preference = Integer.parseInt(albumResPref);
+		Log.i(LOG_TAG,"Using " + albumResPref + " image resolution");
+		AlbumArtDownloader aad = new AlbumArtDownloader(song);
+		return aad.getAlbumUrl(preference);
+		
+	}
 	@Override
 	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 		if(requestCode == REQUIRE_SELECT_STATION && resultCode == RESULT_OK) {
+			Log.i(LOG_TAG, "PandoraStationSelect returned with result_ok");
 			pandora.setCurrentStationId(data.getLongExtra("stationId", -1));
-			(new PlayStationTask()).execute();
+			new PlayStationTask().execute();
 		}
 		else if(requestCode == REQUIRE_LOGIN_CREDS && resultCode == RESULT_OK) {
+			Log.i(LOG_TAG, "PandoraLogin.class returned ok...");
 			serviceSetup();
 		}
+/**		else if(requestCode == REQUIRE_LOGIN_CREDS && resultCode != RESULT_OK ) {
+			Log.i(LOG_TAG, "PandoidLogin.class returned with bad result. finishing activity");
+			finish();
+		}*/
 	}
 
 	public void controlButtonPressed(View button) {
+		String toastMessage;
+		
 		switch(button.getId()) {
 
-		case R.id.player_ban:
-			pandora.rate(RATING_BAN);
-			Toast.makeText(getApplicationContext(), getString(R.string.baned_song), Toast.LENGTH_SHORT).show();
-			if(prefs.getBoolean("behave_nextOnBan", true)) {
-				updateForNewSong(pandora.next());
-			}
-			break;
-
-		case R.id.player_love:
-			pandora.rate(RATING_LOVE);
-			Toast.makeText(getApplicationContext(), getString(R.string.loved_song), Toast.LENGTH_SHORT).show();
-			break;
-
-		case R.id.player_pause:
-			pandora.pause();
-			break;
+			case R.id.station_list:
+				startActivityForResult(new Intent(getApplicationContext(), PandoidStationSelect.class), REQUIRE_SELECT_STATION);
+				break;
+				
+			case R.id.player_ban:
+				if(pandora.isPlaying()) {
+					pandora.rate(RATING_BAN);
+					toastMessage = getString(R.string.baned_song);
+					if(prefs.getBoolean("behave_nextOnBan", true)) {
+						new PlayNextTask().execute();
+					}
+				}
+				else {
+					toastMessage = getString(R.string.no_song);
+				}
+				Toast.makeText(getApplicationContext(), toastMessage, Toast.LENGTH_SHORT).show();
+				break;
+	
+			case R.id.player_love:
+				if(pandora.isPlaying()){
+					pandora.rate(RATING_LOVE);
+					toastMessage = getString(R.string.loved_song);
+				}
+				else {
+					toastMessage = getString(R.string.no_song);
+				}
+				Toast.makeText(getApplicationContext(), toastMessage, Toast.LENGTH_SHORT).show();
+				break;
+	
+			case R.id.player_pause:
+				if(pandora.isPlayable()){
+					if(pandora.isPlaying()){
+						((Button)button).setText(">");
+					}
+					else {
+						((Button)button).setText("||");
+					}
+					pandora.pause();
+				}
+				else {
+					startActivityForResult(new Intent(PandoidPlayer.this, PandoidStationSelect.class), REQUIRE_SELECT_STATION);
+				}
+				break;
 
-		case R.id.player_next:
-			updateForNewSong(pandora.next());
-			break;
+	
+			case R.id.player_next:
+				if(pandora.isPlayable()) {
+					new PlayNextTask().execute();			
+				}
+				else {
+					startActivityForResult(new Intent(PandoidPlayer.this, PandoidStationSelect.class), REQUIRE_SELECT_STATION);
+				}
+				break;
 		}
 	}
 
@@ -163,7 +285,8 @@ public class PandoidPlayer extends Activity {
 				.putString("pandora_username", null)
 				.putString("pandora_password", null)
 				.commit();
-			startActivityForResult(new Intent(getApplicationContext(), PandoidLogin.class), REQUIRE_LOGIN_CREDS);
+			finish();
+			//startActivityForResult(new Intent(getApplicationContext(), PandoidLogin.class), REQUIRE_LOGIN_CREDS);
 			return true;
 
 		case R.id.menu_settings:
@@ -177,23 +300,27 @@ public class PandoidPlayer extends Activity {
 
 	/** Signs in the user and loads their initial data
 	 *     -> brings them toward a station               */
-	private class InitialSetupTask extends AsyncTask<Void, Void, Boolean> {
+	class InitialSetupTask extends AsyncTask<Void, Void, Boolean>{
 		@Override
 		protected void onPreExecute() {
-			waiting = ProgressDialog.show(PandoidPlayer.this, "",  getString(R.string.signing_in));
+			Log.i(SETUP_TAG,"Starting task...");
+			lockOrientation();
+			waiting = ProgressDialog.show(PandoidPlayer.this, "", getString(R.string.signing_in));
 		}
 
 		@Override
 		protected Boolean doInBackground(Void... arg) {
-			PandoraRadioService.createPandoraRadioService(getApplicationContext());
+			PandoraRadioService.createPandoraRadioService(PandoidPlayer.this);
 			pandora = PandoraRadioService.getInstance(true);
 			
 			String username = prefs.getString("pandora_username", null);
 			String password = prefs.getString("pandora_password", null);
 			
 			try {
+				Log.i(SETUP_TAG, "Attempting to sign in using prefs credentials...");
 				pandora.signIn(username, password);
 			} catch(Exception ex) {
+				Log.e(SETUP_TAG, "Failed to sign in...", ex);
 				ex.printStackTrace();
 			}
 			return pandora.isAlive();
@@ -201,26 +328,32 @@ public class PandoidPlayer extends Activity {
 
 		@Override
 		protected void onPostExecute(Boolean result) {
-
+			
+			Log.i(SETUP_TAG, "Finished signin...checking results");
+			Log.i(SETUP_TAG, "calling dismissWaiting()");
+			unlockOrientation();
 			dismissWaiting();
 
-			if(result.booleanValue()) {
-
+			if(result.booleanValue() && result) {
+				Log.i(SETUP_TAG, "Sign in success...");
 				if(!pandora.isPlaying()) {
 
 					if(pandora.isPlayable()) {
 						// play it or resume playback or something smart like that
+						Log.i(SETUP_TAG, "Calling new PlayStationTask...");
 						(new PlayStationTask()).execute();
 					}
 					else {
 						// ask them to select a station
-						startActivityForResult(new Intent(getApplicationContext(), PandoidStationSelect.class), REQUIRE_SELECT_STATION);
+						Log.i(SETUP_TAG, "Need station. Calling PandoidStationSelect.class...");
+						startActivityForResult(new Intent(PandoidPlayer.this, PandoidStationSelect.class), REQUIRE_SELECT_STATION);
 					}
 				}
 			}
 			else {
 				// failed to sign in for some reason
-				Toast.makeText(getApplicationContext(), getString(R.string.signin_failed), Toast.LENGTH_SHORT).show();
+				Log.e(SETUP_TAG, "Sign in failed...Calling PandoidLogin.class");
+				Toast.makeText(PandoidPlayer.this, getString(R.string.signin_failed), Toast.LENGTH_SHORT).show();
 				startActivityForResult(new Intent(getApplicationContext(), PandoidLogin.class), REQUIRE_LOGIN_CREDS);
 			}
 		}
@@ -230,46 +363,75 @@ public class PandoidPlayer extends Activity {
 	private class PlayStationTask extends AsyncTask<Void, Void, Void> {
 		@Override
 		protected void onPreExecute() {
+			Log.i(STATION_TAG, "Starting...ataching activity");
+			lockOrientation();
 			waiting = ProgressDialog.show(PandoidPlayer.this, "",  getString(R.string.loading, pandora.getCurrentStation().getName()));
 		}
 
 		@Override
 		protected Void doInBackground(Void... arg0) {
-			pandora.setListener(OnCompletionListener.class, new OnCompletionListener() {
-				public void onCompletion(MediaPlayer mp) {
-					updateForNewSong(pandora.next());
-				}
-			});
-			pandora.setListener(OnPreparedListener.class, new OnPreparedListener() {
-				public void onPrepared(MediaPlayer mp) {
-				}
-			});
 			pandora.prepare();
-
+			
 			return null;
 		}
 
 		@Override
 		protected void onPostExecute(Void result) {
-			updateForNewSong(pandora.play());
+			Log.i(STATION_TAG, "In postExecute");
+			unlockOrientation();
+			pandora.play();
 			dismissWaiting();
 		}
+	} 
+	class PlayNextTask extends AsyncTask<Void, Void, Void>{
+		
+		@Override
+		protected void onPreExecute() {
+			lockOrientation();
+			waiting = ProgressDialog.show(PandoidPlayer.this, "",  getString(R.string.next_song));
+		}
+		@Override
+		protected Void doInBackground(Void ...voids) {
+			pandora.next();
+			return null;
+		}
+		@Override
+		protected void onPostExecute(Void result) {
+			unlockOrientation();
+			dismissWaiting();
+		}	
 	}
-
 	public static void dismissWaiting() {
 		if(waiting != null && waiting.isShowing()) {
+			Log.i(LOG_TAG, "Called dismissWaiting() with positive result.");
 			waiting.dismiss();
 		}
 	}
+	
+	public void lockOrientation() {
+		this.setRequestedOrientation(getResources().getConfiguration().orientation);
+		Log.i(LOG_TAG, "Locking orientation: " + getResources().getConfiguration().orientation );
+	}
+	public void unlockOrientation() {
+		this.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
+		Log.i(LOG_TAG, "Unlocking orientation: " + getResources().getConfiguration().orientation);
+	}
 
 	@Override
 	protected void onPause() {
 		super.onPause();
-		// Another activity is taking focus (this activity is about to be "paused").
+		unregisterReceiver(receiver);
+		dismissWaiting();
 	}
 
 	@Override
 	protected void onStop() {
 		super.onStop();
+		dismissWaiting();
+	}
+	@Override
+	protected void onDestroy() {
+		super.onDestroy();
+		dismissWaiting();
 	}
 }
\ No newline at end of file
diff --git a/src/com/aregner/android/pandoid/PandoidStationCreator.java b/src/com/aregner/android/pandoid/PandoidStationCreator.java
new file mode 100644
index 0000000..e4d8ae1
--- /dev/null
+++ b/src/com/aregner/android/pandoid/PandoidStationCreator.java
@@ -0,0 +1,7 @@
+package com.aregner.android.pandoid;
+
+import android.app.Activity;
+
+public class PandoidStationCreator extends Activity {
+//to-do
+}
diff --git a/src/com/aregner/android/pandoid/PandoidStationSelect.java b/src/com/aregner/android/pandoid/PandoidStationSelect.java
index 62e7560..58e8f1e 100644
--- a/src/com/aregner/android/pandoid/PandoidStationSelect.java
+++ b/src/com/aregner/android/pandoid/PandoidStationSelect.java
@@ -32,8 +32,8 @@ import android.view.MenuInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
+import android.widget.AdapterView.OnItemLongClickListener;
 import android.widget.BaseAdapter;
-import android.widget.ImageView;
 import android.widget.ListView;
 import android.widget.TextView;
 import android.widget.AdapterView.OnItemClickListener;
@@ -48,7 +48,7 @@ public class PandoidStationSelect extends ListActivity {
 		
 		pandora = PandoraRadioService.getInstance(true);
 		ArrayList<Station> stations = pandora.getStations();
-
+		
 		ListView lv = getListView();
 		setListAdapter(new StationListAdapter(stations, this));
 		lv.setTextFilterEnabled(true);
@@ -60,6 +60,17 @@ public class PandoidStationSelect extends ListActivity {
 				//finishActivity(PandoidPlayer.REQUIRE_SELECT_STATION);
 			}
 		});
+		
+		lv.setOnItemLongClickListener(new OnItemLongClickListener() {
+
+			@Override
+			public boolean onItemLongClick(AdapterView<?> parent, View view,
+					int position, long id) {
+				//delete station stuff here
+				return true;
+			}
+			
+		});
 	}
 
 	@Override
@@ -71,7 +82,7 @@ public class PandoidStationSelect extends ListActivity {
 	@Override
 	public boolean onCreateOptionsMenu(Menu menu) {
 		MenuInflater inflater = getMenuInflater();
-		inflater.inflate(R.menu.player_menu, menu);
+		inflater.inflate(R.menu.station_select_menu, menu);
 		return true;
 	}
 
diff --git a/src/com/aregner/android/pandoid/PandoraDB.java b/src/com/aregner/android/pandoid/PandoraDB.java
index 3682aa6..9defb4c 100644
--- a/src/com/aregner/android/pandoid/PandoraDB.java
+++ b/src/com/aregner/android/pandoid/PandoraDB.java
@@ -28,6 +28,7 @@ import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
 
 
 public class PandoraDB extends SQLiteOpenHelper {
@@ -57,7 +58,8 @@ public class PandoraDB extends SQLiteOpenHelper {
 	}
 	
 	/** */
-	public void syncStations(ArrayList<Station> stations) {
+	public synchronized void syncStations(ArrayList<Station> stations) {
+		Log.i("PandoraDB", "syncstations called");
 		SQLiteDatabase write = getWritableDatabase();
 		Iterator<Station> stationIter = stations.iterator();
 		
diff --git a/src/com/aregner/android/pandoid/PandoraRadioService.java b/src/com/aregner/android/pandoid/PandoraRadioService.java
index c162351..f659a9f 100644
--- a/src/com/aregner/android/pandoid/PandoraRadioService.java
+++ b/src/com/aregner/android/pandoid/PandoraRadioService.java
@@ -29,16 +29,12 @@ import com.aregner.pandora.Station;
 import android.app.Notification;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
-import android.app.ProgressDialog;
 import android.app.Service;
-import android.content.ContentValues;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
-import android.database.sqlite.SQLiteDatabase;
 import android.media.MediaPlayer;
 import android.media.MediaPlayer.OnCompletionListener;
-import android.media.MediaPlayer.OnPreparedListener;
 import android.os.AsyncTask;
 import android.os.IBinder;
 import android.preference.PreferenceManager;
@@ -62,7 +58,8 @@ public class PandoraRadioService extends Service {
 	private Song[] currentPlaylist;
 	private Song[] nextPlaylist;
 	private int currentSongIndex;
-	private HashMap<Class<?>,Object> listeners = new HashMap<Class<?>,Object>();
+	
+	public static final String SONG_CHANGE = "com.aregner.android.pandoid.PanoraRadioService.SONG_CHANGE";
 
 	protected PandoraDB db;
 
@@ -149,10 +146,6 @@ public class PandoraRadioService extends Service {
 		return START_STICKY;
 	}
 	
-	public void setListener(Class<?> klass, Object listener) {
-		listeners.put(klass, listener);
-	}
-	
 	public void setNotification() {
 		Notification notification = new Notification(R.drawable.icon, "Pandoroid Radio", System.currentTimeMillis());
 		Intent notificationIntent = new Intent(this, PandoidPlayer.class);
@@ -212,22 +205,15 @@ public class PandoraRadioService extends Service {
 			return stations;
 		}
 	}
-	@SuppressWarnings("unchecked")
 	public ArrayList<Station> getStations() {
 		ArrayList<Station> stations;
 
 		stations = pandora.getStations();
 
-		(new AsyncTask<ArrayList<Station>, Void, Void>() {
-			@Override
-			protected Void doInBackground(ArrayList<Station>... params) {
-				db = new PandoraDB(getBaseContext());
-				db.syncStations(params[0]);
-				db.close();
-				return null;
-			}
-		}).execute(stations);
-
+		db = new PandoraDB(getBaseContext());
+		db.syncStations(stations);
+		db.close();
+		
 		return stations;
 	}
 	public void setCurrentStationId(long sid) {
@@ -246,6 +232,14 @@ public class PandoraRadioService extends Service {
 	public boolean isPlaying() {
 		return media.isPlaying();
 	}
+	public boolean isReadytoUpdateUI() {
+		boolean ready = false;
+		
+		if (instance != null && media != null && currentStation != null && currentPlaylist != null) {
+			ready = true;
+		}
+		return ready;
+	}
 	public void prepare() {
 		currentPlaylist = currentStation.getPlaylist( prefs.getString("pandora_audioFormat", PandoraRadio.DEFAULT_AUDIO_FORMAT) );
 		prepare(0);
@@ -254,8 +248,15 @@ public class PandoraRadioService extends Service {
 		currentSongIndex = i;
 		media.reset();
 		
-		media.setOnCompletionListener((OnCompletionListener)listeners.get(OnCompletionListener.class));
-		media.setOnPreparedListener((OnPreparedListener)listeners.get(OnPreparedListener.class));
+		media.setOnCompletionListener(new OnCompletionListener(){
+			@Override
+			public void onCompletion(MediaPlayer mp) {
+				next();
+			}
+		});
+	
+	//	media.setOnCompletionListener((OnCompletionListener)listeners.get(OnCompletionListener.class));
+	//	media.setOnPreparedListener((OnPreparedListener)listeners.get(OnPreparedListener.class));
 		try {
 			media.setDataSource( currentPlaylist[i].getAudioUrl() );
 		} catch (IllegalArgumentException e1) {
@@ -284,6 +285,7 @@ public class PandoraRadioService extends Service {
 	public Song play(int i) {
 		media.start();
 		setNotification();
+		songChangeEvent();
 		return currentPlaylist[i];
 	}
 	public void pause() {
@@ -332,4 +334,10 @@ public class PandoraRadioService extends Service {
 		
 		pandora.rate(currentStation, currentPlaylist[currentSongIndex], ratingBool);
 	}
+	
+	private void songChangeEvent() {
+		Intent i = new Intent();
+		i.setAction(SONG_CHANGE);
+		sendBroadcast(i);	
+	} 
 }
diff --git a/src/com/aregner/pandora/PandoraRadio.java b/src/com/aregner/pandora/PandoraRadio.java
index 2f31fc3..20feb80 100644
--- a/src/com/aregner/pandora/PandoraRadio.java
+++ b/src/com/aregner/pandora/PandoraRadio.java
@@ -38,21 +38,20 @@ import org.xmlrpc.android.XMLRPCException;
 
 public class PandoraRadio {
 
-	public static final String PROTOCOL_VERSION = "31";
+	public static final String PROTOCOL_VERSION = "32";
 	private static final String RPC_URL = "http://www.pandora.com/radio/xmlrpc/v"+PROTOCOL_VERSION+"?";
 	private static final String USER_AGENT = "com.aregner.pandora/0.1";
 
 	public static final long PLAYLIST_VALIDITY_TIME = 3600 * 3;
 	public static final String DEFAULT_AUDIO_FORMAT = "aacplus";
 
-	private static final Vector<Object> EMPTY_ARGS = new Vector<Object>();
+	private final Vector<Object> EMPTY_ARGS = new Vector<Object>();
 
 	private XmlRpc xmlrpc;
 	private Blowfish blowfish_encode;
 	private Blowfish blowfish_decode;
 	private String authToken;
 	private String rid;
-	private String listenerId;
 	private String webAuthToken;
 	private ArrayList<Station> stations;
 
@@ -187,9 +186,6 @@ public class PandoraRadio {
 		if(rid != null) {
 			urlArgStrings.add("rid="+rid);
 		}
-		if(listenerId != null) {
-			urlArgStrings.add("lid="+listenerId);
-		}
 		method = method.substring(method.lastIndexOf('.')+1);
 		urlArgStrings.add("method="+method);
 		Iterator<Object> urlArgsIter = urlArgs.iterator();
@@ -226,7 +222,7 @@ public class PandoraRadio {
 	@SuppressWarnings("unchecked")
 	public void connect(String user, String password) {
 		rid = String.format("%07dP", System.currentTimeMillis() % 1000L);
-		listenerId = authToken = null;
+		authToken = null;
 
 		Vector<Object> args = new Vector<Object>(2);
 		args.add(user); args.add(password);
@@ -237,13 +233,12 @@ public class PandoraRadio {
 			HashMap<String,Object> userInfo = (HashMap<String,Object>) result;
 
 			webAuthToken = (String) userInfo.get("webAuthToken");
-			listenerId = (String) userInfo.get("listenerId");
 			authToken = (String) userInfo.get("authToken");
 		}
 	}
 	
 	public void disconnect() {
-		listenerId = authToken = null;
+		authToken = null;
 		webAuthToken = null;
 		
 		if(stations != null) {
@@ -288,6 +283,27 @@ public class PandoraRadio {
 		
 		xmlrpcCall("station.addFeedback", args);
 	}
+	
+	public void bookmarkSong(Station station, Song song) {
+		Vector<Object> args = new Vector<Object>(2);
+		args.add(String.valueOf(station.getId())); args.add(song.getId());
+		
+		xmlrpcCall("station.createBookmark", args);
+	}
+	
+	public void bookmarkArtist(Station station, Song song) {
+		Vector<Object> args = new Vector<Object>(1);
+		args.add(song.getArtistMusicId());
+		
+		xmlrpcCall("station.createArtistBookmark", args);
+	}
+	
+	public void tired(Station station, Song song) {
+		Vector<Object> args = new Vector<Object>(3);
+		args.add(song.getId()); args.add(song.getUserSeed()); args.add(String.valueOf(station.getId()));
+		
+		xmlrpcCall("listener.addTiredSong", args);
+	}
 
 	public boolean isAlive() {
 		return authToken != null;
diff --git a/src/com/aregner/pandora/Song.java b/src/com/aregner/pandora/Song.java
index c42da50..662da97 100644
--- a/src/com/aregner/pandora/Song.java
+++ b/src/com/aregner/pandora/Song.java
@@ -108,4 +108,37 @@ public class Song {
 	public String getAlbum() {
 		return album;
 	}
+	public Integer getRating() {
+		return rating;
+	}
+	public String getArtistMusicId() {
+		return artistMusicId;
+	}
+	public String getFileGain() {
+		return fileGain;
+	}
+	public String getIdentity() {
+		return identity;
+	}
+	public String getStationId() {
+		return stationId;
+	}
+	public String getSongDetailURL() {
+		return songDetailURL;
+	}
+	public String getAlbumDetailURL() {
+		return albumDetailURL;
+	}
+	public boolean isTired() {
+		return tired;
+	}
+	public String getMessage() {
+		return message;
+	}
+	public Object getStartTime() {
+		return startTime;
+	}
+	public boolean isFinished() {
+		return finished;
+	}
 }
